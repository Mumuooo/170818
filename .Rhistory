source('E:/Rfile/170818/avgInterval.R', encoding = 'UTF-8')
library(openxlsx)
library(dplyr)
library(plyr)
library(cluster)
library(randomForest)
fpath <- "E:/Rfile/170818"
xlsxname <- "zj_5M_10M_0904.xlsx"
n=4
source("avgInterval.R")
# setwd(fpath)
D <- list()
for (i in 1:n){
d <- read.xlsx(paste0("data/",xlsxname),i)[,c(2,5:32)]
colnames(d) <- c("time","monitor","monitorIp","visit",
"file_size","trans_time",colnames(d)[7:29])
d$group <- substr(d$time, 1, 2)
# a <- floor(as.numeric(substr(d$time, 4, 5)) / 6)  #Group by hour (6hours)
# d$group <- paste0(substr(d$time,1,3),a)
d <- d[,c(1,30,2:29)]
###set filesize: delete NA
d <- d[which(d$file_size == 5123.25),]
d$trans_time <- round(as.numeric(d$trans_time),3)
t <- which(is.na(d$trans_time))
if(length(t)>=1){
d <- d[-t,]
}
t <- which(d$trans_time==0)
if(length(t)>=1){
d <- d[-t,]
}
d$retrans_rate <- round(d$retrans_bytes/d$trans_bytes,3)
d <- d[,c(1:10,31,11:30)]
D <- c(D,list(d))
}
setwd(fpath)
D <- list()
for (i in 1:n){
d <- read.xlsx(paste0("data/",xlsxname),i)[,c(2,5:32)]
colnames(d) <- c("time","monitor","monitorIp","visit",
"file_size","trans_time",colnames(d)[7:29])
d$group <- substr(d$time, 1, 2)
# a <- floor(as.numeric(substr(d$time, 4, 5)) / 6)  #Group by hour (6hours)
# d$group <- paste0(substr(d$time,1,3),a)
d <- d[,c(1,30,2:29)]
###set filesize: delete NA
d <- d[which(d$file_size == 5123.25),]
d$trans_time <- round(as.numeric(d$trans_time),3)
t <- which(is.na(d$trans_time))
if(length(t)>=1){
d <- d[-t,]
}
t <- which(d$trans_time==0)
if(length(t)>=1){
d <- d[-t,]
}
d$retrans_rate <- round(d$retrans_bytes/d$trans_bytes,3)
d <- d[,c(1:10,31,11:30)]
D <- c(D,list(d))
}
load(paste0(fpath,"/rf_model.Rdata"))  #加载预测模型
Pdata <- list()
for(i in 1:n){
test <- data.frame(D[i])
pred_y <- round(predict(model.rf, test),3)
pred <- data.frame(time=test$time, group=test$group, visit=test$visit,
file_size=test$file_size, real_y=test$trans_time, pred_y=pred_y)
if(i==1){
DP <- pred
}else{
DP <- rbind(DP, pred)
}
# assign(paste0("pred", i), pred)
Pdata <- c(Pdata,list(pred))
}
r <- ddply(DP,"group",summarise,min=min(real_y),mean=mean(real_y),max=max(real_y),median=median(real_y))
p <- ddply(DP,"group",summarise,min=min(pred_y),mean=mean(pred_y),max=max(pred_y),median=median(pred_y))
per <- c(0.125,0.25,0.5,0.75,1,1.25,1.5,2,4)
pername <- c("u0125","u025","u05","u075","u1","u125","u15","u2","u4")
avgrlist <- avgInterval(r, per, pername)
avgplist <- avgInterval(p, per, pername)
for (i in 1:n){
d <- as.data.frame(Pdata[i])
d$score1 <- avgrlist$intervalName[1,10]
d$score2 <- avgrlist$intervalName[1,10]
groups <- unique(d$group)
for(j in 1: length(groups)){  # nrow(r) : 时间组个数
#  根据时间组和传输时间范围评分
t <-  d[which(d$group==groups[j]),]  #把同一时间组的取出来
for(jj in 2:ncol(avgrlist$interval)){  #ncol(r)：trans_time 区间划分个数
if(jj!=ncol(avgrlist$interval)){
tr <- which(t$real_y>=avgrlist$interval[j,(jj-1)] & t$real_y < avgrlist$interval[j,jj]) #实际值情况
tp <- which(t$pred_y>=avgplist$interval[j,(jj-1)] & t$pred_y < avgplist$interval[j,jj]) #预测值情况
}else{
tr <- which(t$real_y>=avgrlist$interval[j,(jj-1)] & t$real_y <= avgrlist$interval[j,jj])
tp <- which(t$pred_y>=avgplist$interval[j,(jj-1)] & t$pred_y <= avgplist$interval[j,jj])
}
t$score1[tr] <- avgrlist$intervalName[j,(jj-1)]
t$score2[tp] <- avgplist$intervalName[j,(jj-1)]
}
d[which(d$group==groups[j]),] <- t
}
Pdata[i] <- list(d)
}
Interval <- avgrlist$interval
View(Interval)
View(r)
source('E:/Rfile/RModels/Transtime_interval.R', encoding = 'UTF-8')
source('E:/Rfile/RModels/Transtime_interval.R', encoding = 'UTF-8')
avgrlist$intervalName
i=1
d <- as.data.frame(Pdata[i])
rr <- ddply(d,"score1",summarise,mean=mean(real_y),min=min(real_y),median=median(real_y),max=max(real_y))
View(rr)
View(d)
rr <- ddply(d,c("group","score1"),summarise,mean=mean(real_y),min=min(real_y),median=median(real_y),max=max(real_y))
d <- as.data.frame(Pdata[i])
groups <- unique(d$group)
i=1
j=1
dd <- d[which(d$group==groups[j]),]
View(dd)
t <- table(dd[,7])
t
yl=ceiling(max(t)/10)*10+10
if(nrow(dd)!=0){
b=barplot(t, ylim = c(0,yl) ,col = "lightblue", border = "blue", main = paste0(p[i],groups[j]))
text(b, t, labels = round(t/sum(t),3), cex=0.6, pos=3)
}
source('E:/Rfile/170818/avgInterval.R', encoding = 'UTF-8')
source('E:/Rfile/RModels/Transtime_interval.R', encoding = 'UTF-8')
source('E:/Rfile/170818/avgInterval.R', encoding = 'UTF-8')
source('E:/Rfile/RModels/Transtime_interval.R', encoding = 'UTF-8')
View(DP)
DP2 <- as.data.frame(Pdata[1])
for(i in 2:n){
DP2 <- rbind(DP2, as.data.frame(Pdata[i]))
}
View(DP2)
i=1
j=1
d <- as.data.frame(Pdata[i])
groups <- unique(d$group)
dd <- d[which(d$group==groups[j]),]
t <- table(dd[,c(7,3)])
t
d <- DP2 #as.data.frame(Pdata[i])
groups <- unique(d$group)
dd <- d[which(d$group==groups[j]),]
t <- table(dd[,c(7,3)])
t
t <- as.matrix(t)
t <- as.data.frame(t)
View(t)
a <- dd[which(dd$visit)=="温州市中国电信(IP:122.228.72.141)"]
a <- dd[which(dd$visit)=="温州市中国电信(IP:122.228.72.141)",]
a <- dd[which(dd$visit=="温州市中国电信(IP:122.228.72.141)"),]
View(a)
a <- d[which(d$visit=="温州市中国电信(IP:122.228.72.141)"),]
max(t)
t <- table(dd[,c(7,3)])
max(t)
yl=ceiling(max(t)/10)*10+10
b=barplot(t, ylim = c(0,yl) ,col = "lightblue", border = "blue", main = paste0(p[i],groups[j]))
text(b, t, labels = round(t/sum(t),3), cex=0.6, pos=3)
b=barplot(t, ylim = c(0,yl), beside=TRUE, col = "lightblue", border = "blue", main = paste0(p[i],groups[j]))
text(b, t, labels = round(t/sum(t),3), cex=0.6, pos=3)
p=c("jx: ", "qz: ", "nb: ", "ls: ")
j=1
windows()
split.screen(c(2,2))
for(i in 1:4){
screen(i)
d <- DP2 #as.data.frame(Pdata[i])
groups <- unique(d$group)
dd <- d[which(d$group==groups[j]),]
t <- table(dd[,c(7,3)])
yl=ceiling(max(t)/10)*10+10
if(nrow(dd)!=0){
b=barplot(t, ylim = c(0,yl), beside=TRUE, col = "lightblue", border = "blue", main = paste0(p[i],groups[j]))
text(b, t, labels = round(t/sum(t),3), cex=0.6, pos=3)
}
}
n=4
visitinfo <- c("嘉兴市中国电信(IP:115.231.74.56)", "衢州市中国电信(IP:115.231.132.39)",
"宁波市中国电信(IP:183.134.14.134)", "宁波市中国电信(IP:183.134.14.134)")
r <- which(dd$visit %in% visitinfo)
r <- dd[which(dd$visit %in% visitinfo),]
View(r)
visitinfo2 <- c("温州市中国电信(IP:122.228.72.141)","温州市中国电信(IP:122.228.72.145)","北京市其它(IP:127.0.0.1)")
r <- DP2[which(DP2$visit %in% visitinfo1),]
r <- DP2[which(DP2$visit %in% visitinfo2),]
View(r)
r <- DP2[which(DP2$visit %in% visitinfo),]
a <- which(DP2$visit %in% visitinfo)
r <- DP2[-a,]
View(r)
visitinfo <- c("嘉兴市中国电信(IP:115.231.74.56)", "衢州市中国电信(IP:115.231.132.39)",
"宁波市中国电信(IP:183.134.14.134)", "丽水市中国电信(IP:61.164.241.60)")
a <- which(DP2$visit %in% visitinfo)
r <- DP2[-a,]
View(r)
